package com.unfpa.appsistenciamaternaunfpa.database.dao.my_knowledge;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.my_knowledge.ContentDetail;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class ContentDetailDAO_Impl implements ContentDetailDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfContentDetail;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public ContentDetailDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfContentDetail = new EntityInsertionAdapter<ContentDetail>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR IGNORE INTO `content_detail`(`nid`,`title`,`field_image`,`field_short_description`,`field_description`,`field_age_group`,`field_objective`,`field_tags`) VALUES (?,?,?,?,?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, ContentDetail value) {
        if (value.getNid() == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.getNid());
        }
        if (value.getTitle() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getTitle());
        }
        if (value.getField_image() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getField_image());
        }
        if (value.getField_short_description() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getField_short_description());
        }
        if (value.getField_description() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getField_description());
        }
        if (value.getField_age_group() == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindString(6, value.getField_age_group());
        }
        if (value.getField_objective() == null) {
          stmt.bindNull(7);
        } else {
          stmt.bindString(7, value.getField_objective());
        }
        if (value.getField_tags() == null) {
          stmt.bindNull(8);
        } else {
          stmt.bindString(8, value.getField_tags());
        }
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM content_detail";
        return _query;
      }
    };
  }

  @Override
  public void insert(ContentDetail contentMaster) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfContentDetail.insert(contentMaster);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<ContentDetail> getAllContent() {
    final String _sql = "SELECT * from content_detail";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfNid = _cursor.getColumnIndexOrThrow("nid");
      final int _cursorIndexOfTitle = _cursor.getColumnIndexOrThrow("title");
      final int _cursorIndexOfFieldImage = _cursor.getColumnIndexOrThrow("field_image");
      final int _cursorIndexOfFieldShortDescription = _cursor.getColumnIndexOrThrow("field_short_description");
      final int _cursorIndexOfFieldDescription = _cursor.getColumnIndexOrThrow("field_description");
      final int _cursorIndexOfFieldAgeGroup = _cursor.getColumnIndexOrThrow("field_age_group");
      final int _cursorIndexOfFieldObjective = _cursor.getColumnIndexOrThrow("field_objective");
      final int _cursorIndexOfFieldTags = _cursor.getColumnIndexOrThrow("field_tags");
      final List<ContentDetail> _result = new ArrayList<ContentDetail>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final ContentDetail _item;
        final String _tmpNid;
        _tmpNid = _cursor.getString(_cursorIndexOfNid);
        final String _tmpTitle;
        _tmpTitle = _cursor.getString(_cursorIndexOfTitle);
        final String _tmpField_image;
        _tmpField_image = _cursor.getString(_cursorIndexOfFieldImage);
        final String _tmpField_short_description;
        _tmpField_short_description = _cursor.getString(_cursorIndexOfFieldShortDescription);
        final String _tmpField_description;
        _tmpField_description = _cursor.getString(_cursorIndexOfFieldDescription);
        final String _tmpField_age_group;
        _tmpField_age_group = _cursor.getString(_cursorIndexOfFieldAgeGroup);
        final String _tmpField_objective;
        _tmpField_objective = _cursor.getString(_cursorIndexOfFieldObjective);
        final String _tmpField_tags;
        _tmpField_tags = _cursor.getString(_cursorIndexOfFieldTags);
        _item = new ContentDetail(_tmpNid,_tmpTitle,_tmpField_image,_tmpField_short_description,_tmpField_description,_tmpField_age_group,_tmpField_objective,_tmpField_tags);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
