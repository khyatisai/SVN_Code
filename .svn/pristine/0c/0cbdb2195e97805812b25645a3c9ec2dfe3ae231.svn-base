package com.unfpa.appsistenciamaternaunfpa.database.dao.my_health;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.my_health.AppointmentReminder;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class AppointmentReminderDAO_Impl implements AppointmentReminderDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfAppointmentReminder;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAppointmentReminder;

  private final SharedSQLiteStatement __preparedStmtOfUpdateEventId;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public AppointmentReminderDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfAppointmentReminder = new EntityInsertionAdapter<AppointmentReminder>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR IGNORE INTO `appointment_reminder`(`appointmentId`,`appointmentName`,`serviceCenterId`,`serviceCenterName`,`time`,`date`,`eventURI`) VALUES (nullif(?, 0),?,?,?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, AppointmentReminder value) {
        stmt.bindLong(1, value.getAppointmentId());
        if (value.getAppointmentName() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getAppointmentName());
        }
        if (value.getServiceCenterId() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getServiceCenterId());
        }
        if (value.getServiceCenterName() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getServiceCenterName());
        }
        if (value.getTime() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getTime());
        }
        if (value.getDate() == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindString(6, value.getDate());
        }
        if (value.getEventURI() == null) {
          stmt.bindNull(7);
        } else {
          stmt.bindString(7, value.getEventURI());
        }
      }
    };
    this.__preparedStmtOfDeleteAppointmentReminder = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM appointment_reminder WHERE appointmentId= ?";
        return _query;
      }
    };
    this.__preparedStmtOfUpdateEventId = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "UPDATE appointment_reminder SET eventURI = ?  WHERE appointmentId= ?";
        return _query;
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM appointment_reminder";
        return _query;
      }
    };
  }

  @Override
  public void insert(AppointmentReminder appointmentReminder) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfAppointmentReminder.insert(appointmentReminder);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAppointmentReminder(int AppointmentReminderId) {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAppointmentReminder.acquire();
    __db.beginTransaction();
    try {
      int _argIndex = 1;
      _stmt.bindLong(_argIndex, AppointmentReminderId);
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAppointmentReminder.release(_stmt);
    }
  }

  @Override
  public void updateEventId(String eventURI, int appointmentReminderId) {
    final SupportSQLiteStatement _stmt = __preparedStmtOfUpdateEventId.acquire();
    __db.beginTransaction();
    try {
      int _argIndex = 1;
      if (eventURI == null) {
        _stmt.bindNull(_argIndex);
      } else {
        _stmt.bindString(_argIndex, eventURI);
      }
      _argIndex = 2;
      _stmt.bindLong(_argIndex, appointmentReminderId);
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfUpdateEventId.release(_stmt);
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<AppointmentReminder> getAllAppointments() {
    final String _sql = "SELECT * from appointment_reminder";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfAppointmentId = _cursor.getColumnIndexOrThrow("appointmentId");
      final int _cursorIndexOfAppointmentName = _cursor.getColumnIndexOrThrow("appointmentName");
      final int _cursorIndexOfServiceCenterId = _cursor.getColumnIndexOrThrow("serviceCenterId");
      final int _cursorIndexOfServiceCenterName = _cursor.getColumnIndexOrThrow("serviceCenterName");
      final int _cursorIndexOfTime = _cursor.getColumnIndexOrThrow("time");
      final int _cursorIndexOfDate = _cursor.getColumnIndexOrThrow("date");
      final int _cursorIndexOfEventURI = _cursor.getColumnIndexOrThrow("eventURI");
      final List<AppointmentReminder> _result = new ArrayList<AppointmentReminder>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final AppointmentReminder _item;
        final String _tmpAppointmentName;
        _tmpAppointmentName = _cursor.getString(_cursorIndexOfAppointmentName);
        final String _tmpServiceCenterId;
        _tmpServiceCenterId = _cursor.getString(_cursorIndexOfServiceCenterId);
        final String _tmpServiceCenterName;
        _tmpServiceCenterName = _cursor.getString(_cursorIndexOfServiceCenterName);
        final String _tmpTime;
        _tmpTime = _cursor.getString(_cursorIndexOfTime);
        final String _tmpDate;
        _tmpDate = _cursor.getString(_cursorIndexOfDate);
        final String _tmpEventURI;
        _tmpEventURI = _cursor.getString(_cursorIndexOfEventURI);
        _item = new AppointmentReminder(_tmpAppointmentName,_tmpServiceCenterId,_tmpServiceCenterName,_tmpTime,_tmpDate,_tmpEventURI);
        final int _tmpAppointmentId;
        _tmpAppointmentId = _cursor.getInt(_cursorIndexOfAppointmentId);
        _item.setAppointmentId(_tmpAppointmentId);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public String getEventURI(int appointmentId) {
    final String _sql = "SELECT eventURI from appointment_reminder where appointmentId = ?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    _statement.bindLong(_argIndex, appointmentId);
    final Cursor _cursor = __db.query(_statement);
    try {
      final String _result;
      if(_cursor.moveToFirst()) {
        _result = _cursor.getString(0);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public AppointmentReminder getLatestAppointment() {
    final String _sql = "SELECT * FROM appointment_reminder ORDER BY appointmentId DESC LIMIT 1";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfAppointmentId = _cursor.getColumnIndexOrThrow("appointmentId");
      final int _cursorIndexOfAppointmentName = _cursor.getColumnIndexOrThrow("appointmentName");
      final int _cursorIndexOfServiceCenterId = _cursor.getColumnIndexOrThrow("serviceCenterId");
      final int _cursorIndexOfServiceCenterName = _cursor.getColumnIndexOrThrow("serviceCenterName");
      final int _cursorIndexOfTime = _cursor.getColumnIndexOrThrow("time");
      final int _cursorIndexOfDate = _cursor.getColumnIndexOrThrow("date");
      final int _cursorIndexOfEventURI = _cursor.getColumnIndexOrThrow("eventURI");
      final AppointmentReminder _result;
      if(_cursor.moveToFirst()) {
        final String _tmpAppointmentName;
        _tmpAppointmentName = _cursor.getString(_cursorIndexOfAppointmentName);
        final String _tmpServiceCenterId;
        _tmpServiceCenterId = _cursor.getString(_cursorIndexOfServiceCenterId);
        final String _tmpServiceCenterName;
        _tmpServiceCenterName = _cursor.getString(_cursorIndexOfServiceCenterName);
        final String _tmpTime;
        _tmpTime = _cursor.getString(_cursorIndexOfTime);
        final String _tmpDate;
        _tmpDate = _cursor.getString(_cursorIndexOfDate);
        final String _tmpEventURI;
        _tmpEventURI = _cursor.getString(_cursorIndexOfEventURI);
        _result = new AppointmentReminder(_tmpAppointmentName,_tmpServiceCenterId,_tmpServiceCenterName,_tmpTime,_tmpDate,_tmpEventURI);
        final int _tmpAppointmentId;
        _tmpAppointmentId = _cursor.getInt(_cursorIndexOfAppointmentId);
        _result.setAppointmentId(_tmpAppointmentId);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
