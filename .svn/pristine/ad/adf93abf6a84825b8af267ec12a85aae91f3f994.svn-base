package com.unfpa.appsistenciamaternaunfpa.database.dao.my_health;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.my_health.PeriodTracker;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class PeriodTrackerDAO_Impl implements PeriodTrackerDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfPeriodTracker;

  private final SharedSQLiteStatement __preparedStmtOfUpDateEndDate;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public PeriodTrackerDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfPeriodTracker = new EntityInsertionAdapter<PeriodTracker>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR IGNORE INTO `period_master`(`periodId`,`startDate`,`endDate`,`periodLength`,`avgCycle`) VALUES (nullif(?, 0),?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, PeriodTracker value) {
        stmt.bindLong(1, value.getPeriodId());
        if (value.getStartDate() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getStartDate());
        }
        if (value.getEndDate() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getEndDate());
        }
        stmt.bindLong(4, value.getPeriodLength());
        stmt.bindLong(5, value.getAvgCycle());
      }
    };
    this.__preparedStmtOfUpDateEndDate = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "UPDATE period_master SET endDate = ?, periodLength =?  WHERE periodId= ?";
        return _query;
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM period_master";
        return _query;
      }
    };
  }

  @Override
  public void insert(PeriodTracker period) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfPeriodTracker.insert(period);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void upDateEndDate(String endDate, int periodLength, int periodId) {
    final SupportSQLiteStatement _stmt = __preparedStmtOfUpDateEndDate.acquire();
    __db.beginTransaction();
    try {
      int _argIndex = 1;
      if (endDate == null) {
        _stmt.bindNull(_argIndex);
      } else {
        _stmt.bindString(_argIndex, endDate);
      }
      _argIndex = 2;
      _stmt.bindLong(_argIndex, periodLength);
      _argIndex = 3;
      _stmt.bindLong(_argIndex, periodId);
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfUpDateEndDate.release(_stmt);
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<PeriodTracker> getAllPeriods() {
    final String _sql = "SELECT * from period_master";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfPeriodId = _cursor.getColumnIndexOrThrow("periodId");
      final int _cursorIndexOfStartDate = _cursor.getColumnIndexOrThrow("startDate");
      final int _cursorIndexOfEndDate = _cursor.getColumnIndexOrThrow("endDate");
      final int _cursorIndexOfPeriodLength = _cursor.getColumnIndexOrThrow("periodLength");
      final int _cursorIndexOfAvgCycle = _cursor.getColumnIndexOrThrow("avgCycle");
      final List<PeriodTracker> _result = new ArrayList<PeriodTracker>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final PeriodTracker _item;
        final String _tmpStartDate;
        _tmpStartDate = _cursor.getString(_cursorIndexOfStartDate);
        final String _tmpEndDate;
        _tmpEndDate = _cursor.getString(_cursorIndexOfEndDate);
        final int _tmpPeriodLength;
        _tmpPeriodLength = _cursor.getInt(_cursorIndexOfPeriodLength);
        final int _tmpAvgCycle;
        _tmpAvgCycle = _cursor.getInt(_cursorIndexOfAvgCycle);
        _item = new PeriodTracker(_tmpStartDate,_tmpEndDate,_tmpPeriodLength,_tmpAvgCycle);
        final int _tmpPeriodId;
        _tmpPeriodId = _cursor.getInt(_cursorIndexOfPeriodId);
        _item.setPeriodId(_tmpPeriodId);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public PeriodTracker getLastPeriod() {
    final String _sql = "SELECT * FROM period_master ORDER BY periodId DESC LIMIT 1";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfPeriodId = _cursor.getColumnIndexOrThrow("periodId");
      final int _cursorIndexOfStartDate = _cursor.getColumnIndexOrThrow("startDate");
      final int _cursorIndexOfEndDate = _cursor.getColumnIndexOrThrow("endDate");
      final int _cursorIndexOfPeriodLength = _cursor.getColumnIndexOrThrow("periodLength");
      final int _cursorIndexOfAvgCycle = _cursor.getColumnIndexOrThrow("avgCycle");
      final PeriodTracker _result;
      if(_cursor.moveToFirst()) {
        final String _tmpStartDate;
        _tmpStartDate = _cursor.getString(_cursorIndexOfStartDate);
        final String _tmpEndDate;
        _tmpEndDate = _cursor.getString(_cursorIndexOfEndDate);
        final int _tmpPeriodLength;
        _tmpPeriodLength = _cursor.getInt(_cursorIndexOfPeriodLength);
        final int _tmpAvgCycle;
        _tmpAvgCycle = _cursor.getInt(_cursorIndexOfAvgCycle);
        _result = new PeriodTracker(_tmpStartDate,_tmpEndDate,_tmpPeriodLength,_tmpAvgCycle);
        final int _tmpPeriodId;
        _tmpPeriodId = _cursor.getInt(_cursorIndexOfPeriodId);
        _result.setPeriodId(_tmpPeriodId);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
