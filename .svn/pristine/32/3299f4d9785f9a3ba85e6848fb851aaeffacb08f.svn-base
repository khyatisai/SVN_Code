package com.unfpa.appsistenciamaternaunfpa.database.dao.my_health;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.my_health.MedicineReminder;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class MedicineReminderDAO_Impl implements MedicineReminderDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfMedicineReminder;

  private final SharedSQLiteStatement __preparedStmtOfUpEventId;

  private final SharedSQLiteStatement __preparedStmtOfDeleteMedicineReminder;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public MedicineReminderDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfMedicineReminder = new EntityInsertionAdapter<MedicineReminder>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR IGNORE INTO `medicine_reminder`(`medicineReminderId`,`date`,`time`,`withFood`,`medicineName`,`dose`,`days`,`reminderBefore`,`eventId`,`eventURI`) VALUES (nullif(?, 0),?,?,?,?,?,?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, MedicineReminder value) {
        stmt.bindLong(1, value.getMedicineReminderId());
        if (value.getDate() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getDate());
        }
        if (value.getTime() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getTime());
        }
        final int _tmp;
        _tmp = value.getWithFood() ? 1 : 0;
        stmt.bindLong(4, _tmp);
        if (value.getMedicineName() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getMedicineName());
        }
        stmt.bindLong(6, value.getDose());
        stmt.bindLong(7, value.getDays());
        if (value.getReminderBefore() == null) {
          stmt.bindNull(8);
        } else {
          stmt.bindString(8, value.getReminderBefore());
        }
        stmt.bindLong(9, value.getEventId());
        if (value.getEventURI() == null) {
          stmt.bindNull(10);
        } else {
          stmt.bindString(10, value.getEventURI());
        }
      }
    };
    this.__preparedStmtOfUpEventId = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "UPDATE medicine_reminder SET eventId = ?, eventURI = ?  WHERE medicineReminderId= ?";
        return _query;
      }
    };
    this.__preparedStmtOfDeleteMedicineReminder = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM medicine_reminder WHERE medicineReminderId= ?";
        return _query;
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM medicine_reminder";
        return _query;
      }
    };
  }

  @Override
  public void insert(MedicineReminder medicineReminder) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfMedicineReminder.insert(medicineReminder);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void upEventId(long eventId, String eventURI, int medicineReminderId) {
    final SupportSQLiteStatement _stmt = __preparedStmtOfUpEventId.acquire();
    __db.beginTransaction();
    try {
      int _argIndex = 1;
      _stmt.bindLong(_argIndex, eventId);
      _argIndex = 2;
      if (eventURI == null) {
        _stmt.bindNull(_argIndex);
      } else {
        _stmt.bindString(_argIndex, eventURI);
      }
      _argIndex = 3;
      _stmt.bindLong(_argIndex, medicineReminderId);
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfUpEventId.release(_stmt);
    }
  }

  @Override
  public void deleteMedicineReminder(int medicineReminderId) {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteMedicineReminder.acquire();
    __db.beginTransaction();
    try {
      int _argIndex = 1;
      _stmt.bindLong(_argIndex, medicineReminderId);
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteMedicineReminder.release(_stmt);
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<MedicineReminder> getAllMedicine() {
    final String _sql = "SELECT * from medicine_reminder";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfMedicineReminderId = _cursor.getColumnIndexOrThrow("medicineReminderId");
      final int _cursorIndexOfDate = _cursor.getColumnIndexOrThrow("date");
      final int _cursorIndexOfTime = _cursor.getColumnIndexOrThrow("time");
      final int _cursorIndexOfWithFood = _cursor.getColumnIndexOrThrow("withFood");
      final int _cursorIndexOfMedicineName = _cursor.getColumnIndexOrThrow("medicineName");
      final int _cursorIndexOfDose = _cursor.getColumnIndexOrThrow("dose");
      final int _cursorIndexOfDays = _cursor.getColumnIndexOrThrow("days");
      final int _cursorIndexOfReminderBefore = _cursor.getColumnIndexOrThrow("reminderBefore");
      final int _cursorIndexOfEventId = _cursor.getColumnIndexOrThrow("eventId");
      final int _cursorIndexOfEventURI = _cursor.getColumnIndexOrThrow("eventURI");
      final List<MedicineReminder> _result = new ArrayList<MedicineReminder>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final MedicineReminder _item;
        final String _tmpDate;
        _tmpDate = _cursor.getString(_cursorIndexOfDate);
        final String _tmpTime;
        _tmpTime = _cursor.getString(_cursorIndexOfTime);
        final boolean _tmpWithFood;
        final int _tmp;
        _tmp = _cursor.getInt(_cursorIndexOfWithFood);
        _tmpWithFood = _tmp != 0;
        final String _tmpMedicineName;
        _tmpMedicineName = _cursor.getString(_cursorIndexOfMedicineName);
        final int _tmpDose;
        _tmpDose = _cursor.getInt(_cursorIndexOfDose);
        final int _tmpDays;
        _tmpDays = _cursor.getInt(_cursorIndexOfDays);
        final String _tmpReminderBefore;
        _tmpReminderBefore = _cursor.getString(_cursorIndexOfReminderBefore);
        final long _tmpEventId;
        _tmpEventId = _cursor.getLong(_cursorIndexOfEventId);
        final String _tmpEventURI;
        _tmpEventURI = _cursor.getString(_cursorIndexOfEventURI);
        _item = new MedicineReminder(_tmpDate,_tmpTime,_tmpWithFood,_tmpMedicineName,_tmpDose,_tmpDays,_tmpReminderBefore,_tmpEventId,_tmpEventURI);
        final int _tmpMedicineReminderId;
        _tmpMedicineReminderId = _cursor.getInt(_cursorIndexOfMedicineReminderId);
        _item.setMedicineReminderId(_tmpMedicineReminderId);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public String getEventURI(long eventId) {
    final String _sql = "SELECT eventURI from medicine_reminder where eventId = ?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    _statement.bindLong(_argIndex, eventId);
    final Cursor _cursor = __db.query(_statement);
    try {
      final String _result;
      if(_cursor.moveToFirst()) {
        _result = _cursor.getString(0);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public MedicineReminder getLatestReminder() {
    final String _sql = "SELECT * FROM medicine_reminder ORDER BY medicineReminderId DESC LIMIT 1";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfMedicineReminderId = _cursor.getColumnIndexOrThrow("medicineReminderId");
      final int _cursorIndexOfDate = _cursor.getColumnIndexOrThrow("date");
      final int _cursorIndexOfTime = _cursor.getColumnIndexOrThrow("time");
      final int _cursorIndexOfWithFood = _cursor.getColumnIndexOrThrow("withFood");
      final int _cursorIndexOfMedicineName = _cursor.getColumnIndexOrThrow("medicineName");
      final int _cursorIndexOfDose = _cursor.getColumnIndexOrThrow("dose");
      final int _cursorIndexOfDays = _cursor.getColumnIndexOrThrow("days");
      final int _cursorIndexOfReminderBefore = _cursor.getColumnIndexOrThrow("reminderBefore");
      final int _cursorIndexOfEventId = _cursor.getColumnIndexOrThrow("eventId");
      final int _cursorIndexOfEventURI = _cursor.getColumnIndexOrThrow("eventURI");
      final MedicineReminder _result;
      if(_cursor.moveToFirst()) {
        final String _tmpDate;
        _tmpDate = _cursor.getString(_cursorIndexOfDate);
        final String _tmpTime;
        _tmpTime = _cursor.getString(_cursorIndexOfTime);
        final boolean _tmpWithFood;
        final int _tmp;
        _tmp = _cursor.getInt(_cursorIndexOfWithFood);
        _tmpWithFood = _tmp != 0;
        final String _tmpMedicineName;
        _tmpMedicineName = _cursor.getString(_cursorIndexOfMedicineName);
        final int _tmpDose;
        _tmpDose = _cursor.getInt(_cursorIndexOfDose);
        final int _tmpDays;
        _tmpDays = _cursor.getInt(_cursorIndexOfDays);
        final String _tmpReminderBefore;
        _tmpReminderBefore = _cursor.getString(_cursorIndexOfReminderBefore);
        final long _tmpEventId;
        _tmpEventId = _cursor.getLong(_cursorIndexOfEventId);
        final String _tmpEventURI;
        _tmpEventURI = _cursor.getString(_cursorIndexOfEventURI);
        _result = new MedicineReminder(_tmpDate,_tmpTime,_tmpWithFood,_tmpMedicineName,_tmpDose,_tmpDays,_tmpReminderBefore,_tmpEventId,_tmpEventURI);
        final int _tmpMedicineReminderId;
        _tmpMedicineReminderId = _cursor.getInt(_cursorIndexOfMedicineReminderId);
        _result.setMedicineReminderId(_tmpMedicineReminderId);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
