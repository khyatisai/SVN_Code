package com.unfpa.appsistenciamaternaunfpa.database.dao.myvoice;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.myvoice.MyVoiceEntity;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class MyVoiceDAO_Impl implements MyVoiceDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfMyVoiceEntity;

  private final EntityDeletionOrUpdateAdapter __updateAdapterOfMyVoiceEntity;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public MyVoiceDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfMyVoiceEntity = new EntityInsertionAdapter<MyVoiceEntity>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR ABORT INTO `my_voice`(`unique_id`,`title`,`story`,`story_mode`) VALUES (?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, MyVoiceEntity value) {
        if (value.getUnique_id() == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.getUnique_id());
        }
        if (value.getTitle() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getTitle());
        }
        if (value.getStory() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getStory());
        }
        if (value.getStory_mode() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getStory_mode());
        }
      }
    };
    this.__updateAdapterOfMyVoiceEntity = new EntityDeletionOrUpdateAdapter<MyVoiceEntity>(__db) {
      @Override
      public String createQuery() {
        return "UPDATE OR ABORT `my_voice` SET `unique_id` = ?,`title` = ?,`story` = ?,`story_mode` = ? WHERE `unique_id` = ?";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, MyVoiceEntity value) {
        if (value.getUnique_id() == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.getUnique_id());
        }
        if (value.getTitle() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getTitle());
        }
        if (value.getStory() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getStory());
        }
        if (value.getStory_mode() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getStory_mode());
        }
        if (value.getUnique_id() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getUnique_id());
        }
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM my_services";
        return _query;
      }
    };
  }

  @Override
  public void insert(MyVoiceEntity MyVoiceEntity) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfMyVoiceEntity.insert(MyVoiceEntity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void update(MyVoiceEntity MyVoiceEntity) {
    __db.beginTransaction();
    try {
      __updateAdapterOfMyVoiceEntity.handle(MyVoiceEntity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<MyVoiceEntity> getAllContent() {
    final String _sql = "SELECT * from my_voice";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfUniqueId = _cursor.getColumnIndexOrThrow("unique_id");
      final int _cursorIndexOfTitle = _cursor.getColumnIndexOrThrow("title");
      final int _cursorIndexOfStory = _cursor.getColumnIndexOrThrow("story");
      final int _cursorIndexOfStoryMode = _cursor.getColumnIndexOrThrow("story_mode");
      final List<MyVoiceEntity> _result = new ArrayList<MyVoiceEntity>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final MyVoiceEntity _item;
        final String _tmpUnique_id;
        _tmpUnique_id = _cursor.getString(_cursorIndexOfUniqueId);
        final String _tmpTitle;
        _tmpTitle = _cursor.getString(_cursorIndexOfTitle);
        final String _tmpStory;
        _tmpStory = _cursor.getString(_cursorIndexOfStory);
        final String _tmpStory_mode;
        _tmpStory_mode = _cursor.getString(_cursorIndexOfStoryMode);
        _item = new MyVoiceEntity(_tmpUnique_id,_tmpTitle,_tmpStory,_tmpStory_mode);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
