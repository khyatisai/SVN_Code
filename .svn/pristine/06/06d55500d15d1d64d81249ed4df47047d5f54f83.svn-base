package com.unfpa.appsistenciamaternaunfpa.database.dao.myservicedao;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.myserviceentity.MyServiceEntity;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class MyServiceDAO_Impl implements MyServiceDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfMyServiceEntity;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public MyServiceDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfMyServiceEntity = new EntityInsertionAdapter<MyServiceEntity>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR ABORT INTO `my_services`(`title`,`nid`,`body`,`uuid`) VALUES (?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, MyServiceEntity value) {
        if (value.getTitle() == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.getTitle());
        }
        if (value.getNid() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getNid());
        }
        if (value.getBody() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getBody());
        }
        if (value.getUuid() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getUuid());
        }
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM my_services";
        return _query;
      }
    };
  }

  @Override
  public void insert(MyServiceEntity myServiceEntity) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfMyServiceEntity.insert(myServiceEntity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<MyServiceEntity> getAllContent() {
    final String _sql = "SELECT * from my_services";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfTitle = _cursor.getColumnIndexOrThrow("title");
      final int _cursorIndexOfNid = _cursor.getColumnIndexOrThrow("nid");
      final int _cursorIndexOfBody = _cursor.getColumnIndexOrThrow("body");
      final int _cursorIndexOfUuid = _cursor.getColumnIndexOrThrow("uuid");
      final List<MyServiceEntity> _result = new ArrayList<MyServiceEntity>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final MyServiceEntity _item;
        final String _tmpTitle;
        _tmpTitle = _cursor.getString(_cursorIndexOfTitle);
        final String _tmpNid;
        _tmpNid = _cursor.getString(_cursorIndexOfNid);
        final String _tmpBody;
        _tmpBody = _cursor.getString(_cursorIndexOfBody);
        final String _tmpUuid;
        _tmpUuid = _cursor.getString(_cursorIndexOfUuid);
        _item = new MyServiceEntity(_tmpTitle,_tmpNid,_tmpBody,_tmpUuid);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public String getServiceUuid(String nid) {
    final String _sql = "SELECT uuid from my_services WHERE nid=? ";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    if (nid == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, nid);
    }
    final Cursor _cursor = __db.query(_statement);
    try {
      final String _result;
      if(_cursor.moveToFirst()) {
        _result = _cursor.getString(0);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<MyServiceEntity> getContentListSearch(String strSearch) {
    final String _sql = "SELECT * from my_services WHERE (title LIKE '%' || ? || '%' OR  body LIKE '%' || ? || '%')";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 2);
    int _argIndex = 1;
    if (strSearch == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, strSearch);
    }
    _argIndex = 2;
    if (strSearch == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, strSearch);
    }
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfTitle = _cursor.getColumnIndexOrThrow("title");
      final int _cursorIndexOfNid = _cursor.getColumnIndexOrThrow("nid");
      final int _cursorIndexOfBody = _cursor.getColumnIndexOrThrow("body");
      final int _cursorIndexOfUuid = _cursor.getColumnIndexOrThrow("uuid");
      final List<MyServiceEntity> _result = new ArrayList<MyServiceEntity>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final MyServiceEntity _item;
        final String _tmpTitle;
        _tmpTitle = _cursor.getString(_cursorIndexOfTitle);
        final String _tmpNid;
        _tmpNid = _cursor.getString(_cursorIndexOfNid);
        final String _tmpBody;
        _tmpBody = _cursor.getString(_cursorIndexOfBody);
        final String _tmpUuid;
        _tmpUuid = _cursor.getString(_cursorIndexOfUuid);
        _item = new MyServiceEntity(_tmpTitle,_tmpNid,_tmpBody,_tmpUuid);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
