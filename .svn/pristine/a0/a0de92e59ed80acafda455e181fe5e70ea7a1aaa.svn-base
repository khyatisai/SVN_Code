package com.unfpa.appsistenciamaternaunfpa.database.dao.notification;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.notification.Notification2;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class NotificationDAO2_Impl implements NotificationDAO2 {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfNotification2;

  public NotificationDAO2_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfNotification2 = new EntityInsertionAdapter<Notification2>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR IGNORE INTO `appointment_notification_reminder`(`notificationId`,`data`,`title`,`state`,`hour`) VALUES (nullif(?, 0),?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, Notification2 value) {
        stmt.bindLong(1, value.getNotificationId());
        if (value.getData() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getData());
        }
        if (value.getTitle() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getTitle());
        }
        final int _tmp;
        _tmp = value.getState() ? 1 : 0;
        stmt.bindLong(4, _tmp);
        if (value.getHour() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getHour());
        }
      }
    };
  }

  @Override
  public void insertNotification(Notification2 notification) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfNotification2.insert(notification);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public List<Notification2> getAllNotificationAppointment() {
    final String _sql = "SELECT * from appointment_notification_reminder";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfNotificationId = _cursor.getColumnIndexOrThrow("notificationId");
      final int _cursorIndexOfData = _cursor.getColumnIndexOrThrow("data");
      final int _cursorIndexOfTitle = _cursor.getColumnIndexOrThrow("title");
      final int _cursorIndexOfState = _cursor.getColumnIndexOrThrow("state");
      final int _cursorIndexOfHour = _cursor.getColumnIndexOrThrow("hour");
      final List<Notification2> _result = new ArrayList<Notification2>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final Notification2 _item;
        final String _tmpData;
        _tmpData = _cursor.getString(_cursorIndexOfData);
        final String _tmpTitle;
        _tmpTitle = _cursor.getString(_cursorIndexOfTitle);
        final boolean _tmpState;
        final int _tmp;
        _tmp = _cursor.getInt(_cursorIndexOfState);
        _tmpState = _tmp != 0;
        final String _tmpHour;
        _tmpHour = _cursor.getString(_cursorIndexOfHour);
        _item = new Notification2(_tmpData,_tmpTitle,_tmpState,_tmpHour);
        final int _tmpNotificationId;
        _tmpNotificationId = _cursor.getInt(_cursorIndexOfNotificationId);
        _item.setNotificationId(_tmpNotificationId);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
