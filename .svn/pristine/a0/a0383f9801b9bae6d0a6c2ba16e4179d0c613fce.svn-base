package com.unfpa.appsistenciamaternaunfpa.database.dao.my_knowledge;

import android.database.Cursor;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.unfpa.appsistenciamaternaunfpa.database.entity.my_knowledge.QuizRequest;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unchecked")
public final class QuizRequestDAO_Impl implements QuizRequestDAO {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfQuizRequest;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAll;

  public QuizRequestDAO_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfQuizRequest = new EntityInsertionAdapter<QuizRequest>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR IGNORE INTO `quiz_request`(`categoryId`,`quizId`,`jsonQuiz`) VALUES (?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, QuizRequest value) {
        if (value.getCategoryId() == null) {
          stmt.bindNull(1);
        } else {
          stmt.bindString(1, value.getCategoryId());
        }
        if (value.getQuizId() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getQuizId());
        }
        if (value.getJsonQuiz() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getJsonQuiz());
        }
      }
    };
    this.__preparedStmtOfDeleteAll = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM quiz_request";
        return _query;
      }
    };
  }

  @Override
  public void insert(QuizRequest quizRequest) {
    __db.beginTransaction();
    try {
      __insertionAdapterOfQuizRequest.insert(quizRequest);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAll() {
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAll.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAll.release(_stmt);
    }
  }

  @Override
  public List<QuizRequest> getAllQuiz() {
    final String _sql = "SELECT * from quiz_request";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfCategoryId = _cursor.getColumnIndexOrThrow("categoryId");
      final int _cursorIndexOfQuizId = _cursor.getColumnIndexOrThrow("quizId");
      final int _cursorIndexOfJsonQuiz = _cursor.getColumnIndexOrThrow("jsonQuiz");
      final List<QuizRequest> _result = new ArrayList<QuizRequest>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final QuizRequest _item;
        final String _tmpCategoryId;
        _tmpCategoryId = _cursor.getString(_cursorIndexOfCategoryId);
        final String _tmpQuizId;
        _tmpQuizId = _cursor.getString(_cursorIndexOfQuizId);
        final String _tmpJsonQuiz;
        _tmpJsonQuiz = _cursor.getString(_cursorIndexOfJsonQuiz);
        _item = new QuizRequest(_tmpCategoryId,_tmpQuizId,_tmpJsonQuiz);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public List<QuizRequest> getQuizCategoryWise(String categoryId) {
    final String _sql = "SELECT * from quiz_request WHERE categoryId = ?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 1);
    int _argIndex = 1;
    if (categoryId == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, categoryId);
    }
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfCategoryId = _cursor.getColumnIndexOrThrow("categoryId");
      final int _cursorIndexOfQuizId = _cursor.getColumnIndexOrThrow("quizId");
      final int _cursorIndexOfJsonQuiz = _cursor.getColumnIndexOrThrow("jsonQuiz");
      final List<QuizRequest> _result = new ArrayList<QuizRequest>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final QuizRequest _item;
        final String _tmpCategoryId;
        _tmpCategoryId = _cursor.getString(_cursorIndexOfCategoryId);
        final String _tmpQuizId;
        _tmpQuizId = _cursor.getString(_cursorIndexOfQuizId);
        final String _tmpJsonQuiz;
        _tmpJsonQuiz = _cursor.getString(_cursorIndexOfJsonQuiz);
        _item = new QuizRequest(_tmpCategoryId,_tmpQuizId,_tmpJsonQuiz);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }

  @Override
  public QuizRequest getQuizQuizIdWise(String categoryId, String quizId) {
    final String _sql = "SELECT * from quiz_request WHERE categoryId = ? AND quizId = ?";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 2);
    int _argIndex = 1;
    if (categoryId == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, categoryId);
    }
    _argIndex = 2;
    if (quizId == null) {
      _statement.bindNull(_argIndex);
    } else {
      _statement.bindString(_argIndex, quizId);
    }
    final Cursor _cursor = __db.query(_statement);
    try {
      final int _cursorIndexOfCategoryId = _cursor.getColumnIndexOrThrow("categoryId");
      final int _cursorIndexOfQuizId = _cursor.getColumnIndexOrThrow("quizId");
      final int _cursorIndexOfJsonQuiz = _cursor.getColumnIndexOrThrow("jsonQuiz");
      final QuizRequest _result;
      if(_cursor.moveToFirst()) {
        final String _tmpCategoryId;
        _tmpCategoryId = _cursor.getString(_cursorIndexOfCategoryId);
        final String _tmpQuizId;
        _tmpQuizId = _cursor.getString(_cursorIndexOfQuizId);
        final String _tmpJsonQuiz;
        _tmpJsonQuiz = _cursor.getString(_cursorIndexOfJsonQuiz);
        _result = new QuizRequest(_tmpCategoryId,_tmpQuizId,_tmpJsonQuiz);
      } else {
        _result = null;
      }
      return _result;
    } finally {
      _cursor.close();
      _statement.release();
    }
  }
}
